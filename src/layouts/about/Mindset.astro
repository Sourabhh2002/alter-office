---
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";

interface Props {
  prevPage?: string;
  nextPage?: string;
}

const { prevPage, nextPage } = Astro.props;

// Extract the current page number from the URL
const currentPath = Astro.url.pathname;
const pageNumberMatch = currentPath.match(/\/(\d+)$/);
const currentPageNumber = pageNumberMatch ? parseInt(pageNumberMatch[1]) : 1;
const totalPages = 10; // Assuming there are 10 pages total
---

<Layout title="Mindset">
  <section
    class="bg-[#12FF00] h-[100dvh] pt-[10px] sm:pt-[16px] md:pt-[21px] 2xl:pt-[33px] overflow-hidden relative"
  >
    <div class="inner-container">
      <div class="w-full px-[11px] sm:px-[27px] md:px-[43px] lg:px-[75px]">
        <!-- Alter office logo -->
        <Image
          src="/images/misc/tao_logo_blue.png"
          alt="Alter_Office_Logo"
          width={212}
          height={72}
          loading="eager"
          class="w-[164px] h-[56px] sm:w-[188px] sm:h-[64px] md:w-[212px] md:h-[72px]"
          id="alter__office__logo"
        />
      </div>

      <!-- Overlay bordered text -->
      <div
        class="font-HamonOutline text-[clamp(9.375rem,7.571rem+9.018vw,15.688rem)] sm:leading-[290px] absolute sm:right-[200px] top-[-30px] sm:top-[-125px] opacity-25 text-[#000000]"
      >
        Mindset
      </div>

      <!-- Close btn -->
      <a
        id="close-btn"
        href="/about"
        class="size-[70px] sm:size-[98px] absolute top-0 right-0 bg-[#000000] flex items-center justify-center cursor-pointer"
      >
        <Image
          src="/images/misc/close.svg"
          alt="Close"
          width={42}
          height={42}
          loading="eager"
          class="size-[28px] sm:size-[42px]"
        />
      </a>

      <!-- Main content -->
      <div class="main-content">
        <slot />
      </div>

      <!-- Progress bar -->
      <div
        class="w-full h-[20px] bg-[rgba(0,0,0,0.1)] absolute bottom-0 left-0 right-0"
      >
        <div
          id="progress-bar-fill"
          class="h-full bg-[#2933AF]"
          data-page={currentPageNumber}
          data-total={totalPages}
        >
        </div>
      </div>

      <!-- Arrow btns -->
      <div class="flex items-end absolute right-0 bottom-0">
        <!-- Back arrow -->
        {
          prevPage && (
            <a
              href={prevPage}
              class="h-[95px] w-[100px] sm:size-[123px] bg-[#C80005] flex items-center justify-center cursor-pointer"
            >
              <Image
                src="/images/misc/back_arrow.svg"
                alt="Back_Arrow"
                width={54}
                height={54}
                loading="lazy"
                class="size-[40px] sm:size-[54px]"
              />
            </a>
          )
        }

        <!-- Forward arrow -->
        {
          nextPage && (
            <a
              href={nextPage}
              class="w-[130px] h-[135px] sm:w-[160px] sm:h-[165px] bg-[#2933AF] flex items-center justify-center cursor-pointer"
            >
              <Image
                src="/images/misc/forward_arrow.svg"
                alt="Forward_Arrow"
                width={68}
                height={68}
                loading="lazy"
                class="size-[54px] sm:size-[68px]"
              />
            </a>
          )
        }
      </div>
    </div>
  </section>

  <!-- Styles -->
  <style>
    .inner-container {
      visibility: hidden;
    }

    @media (max-width: 1024px) and (min-width: 640px) {
      .main-content {
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        transform: translateY(-70%);
      }
    }

    @media (max-height: 350px) {
      section {
        height: auto !important;
        min-height: 350px;
        overflow-y: auto !important;
      }
    }
  </style>

  <!-- Script -->

  <!-- Global -->
  <script>
    function calculateBaseZoom() {
      const minZoom = 0.35;
      const maxZoom = 1.9;
      const minHeight = 350;
      const maxHeight = 2160;
      const viewportHeight = window.innerHeight;

      return Math.max(
        minZoom,
        Math.min(
          maxZoom,
          minZoom +
            (maxZoom - minZoom) *
              ((viewportHeight - minHeight) / (maxHeight - minHeight))
        )
      );
    }

    // Initialize with proper zoom based on current viewport
    let lastComputedZoom = calculateBaseZoom();

    function setFluidZoom() {
      const widthBreakpoint = 1440;
      const viewportWidth = window.innerWidth;

      // Always calculate height-based zoom
      let heightZoom = calculateBaseZoom();
      let finalZoom = heightZoom;

      if (viewportWidth >= widthBreakpoint) {
        // Above breakpoint: apply width constraints
        const widthZoom = viewportWidth / 1920;
        finalZoom = Math.min(heightZoom, widthZoom);
        lastComputedZoom = finalZoom;
      } else {
        // Below breakpoint: use the most constrained zoom
        finalZoom = Math.min(lastComputedZoom, heightZoom);

        // Special case: if we're loading below 1440px initially,
        // use height-based zoom but prevent it from being larger
        // than what it would be at 1440px width
        if (lastComputedZoom === heightZoom) {
          const hypotheticalWidthZoom = 1440 / 1920;
          finalZoom = Math.min(heightZoom, hypotheticalWidthZoom);
          lastComputedZoom = finalZoom;
        }
      }

      const innerContainer = document.querySelector(".inner-container");
      if (innerContainer instanceof HTMLElement) {
        innerContainer.style.zoom = String(finalZoom);
        innerContainer.style.visibility = "visible";
      }
    }

    window.addEventListener("load", setFluidZoom);
    window.addEventListener("resize", setFluidZoom);
  </script>

  <script>
    declare const gsap: any;

    // Reset progress bar
    document
      .getElementById("close-btn")
      ?.addEventListener("click", function () {
        sessionStorage.removeItem("mindsetProgressWidth");
      });

    // Animate progress bar
    const progressBarFill = document.getElementById("progress-bar-fill");
    const currentPage = parseInt(
      progressBarFill?.getAttribute("data-page") || "1"
    );
    const totalPages = parseInt(
      progressBarFill?.getAttribute("data-total") || "10"
    );
    const progressWidth = (currentPage / totalPages) * 100;
    const prevWidth =
      parseFloat(sessionStorage.getItem("mindsetProgressWidth") || "") || 0;

    // Animate from the stored width to the new width
    gsap.fromTo(
      progressBarFill,
      { width: `${prevWidth}%` },
      {
        width: `${progressWidth}%`,
        duration: 1,
        delay: 0.55,
        ease: "power3.out",
        onComplete: () => {
          sessionStorage.setItem(
            "mindsetProgressWidth",
            JSON.stringify(progressWidth)
          );
        },
      }
    );
  </script>
</Layout>
